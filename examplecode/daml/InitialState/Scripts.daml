module InitialState.Scripts where

import InitialState.Cash

import Daml.Script
import DA.Action
import DA.Foldable (forA_)

data TestParties = TestParties with
  pBank : Party
  pAlice : Party
  pBob : Party

data TestUsers = TestUsers with
  uBank : UserId
  uAlice : UserId
  uBob : UserId

initParties : Script TestParties
initParties = do
  let allocate t = allocatePartyWithHint t (PartyIdHint t)
  pBank <- allocate "Bank"
  pAlice <- allocate "Alice"
  pBob <- allocate "Bob"

  return (TestParties with ..)







initUsers : TestParties -> Script TestUsers
initUsers TestParties{..} = do
  let 
    makeUser id p rs = do
      uid <- validateUserId id
      let 
        u = User with 
          userId = uid
          primaryParty = Some p
      createUser u (CanActAs p :: rs)
      return uid
  uBank <- makeUser "bank" pBank []
  uAlice <- makeUser "alice" pAlice []
  uBob <- makeUser "bob" pBob []

  return (TestUsers with ..)

















initCash : Script (TestParties, TestUsers)
initCash = do
  ps@TestParties{..} <- initParties
  us@TestUsers{..} <- initUsers ps

  -- Issue some cash in the form of transfer proposals.
  let position = Position with
        issuer = pBank
        owner = pBank
        obs = []
        quantity = 1.0

  -- 5 positions of $1 for Alice
  replicateA_ 5 $ submitUser uBank do
    createCmd TransferProposal with
        position
        newOwner = pAlice 

  -- 3 positions of $1 for Bob
  replicateA_ 3 $ submitUser uBank do
    createCmd TransferProposal with
        position
        newOwner = pBob










  -- Alice accepts her transfer proposals
  aliceProposals <- query @TransferProposal pAlice
  forA_ aliceProposals (\p -> submit pAlice do 
    exerciseCmd p._1 Accept)

  -- Bob accepts his transfer proposals
  bobProposals <- query @TransferProposal pBob  
  forA_ bobProposals (\p -> submit pBob do 
    exerciseCmd p._1 Accept)
  
  return (ps, us)